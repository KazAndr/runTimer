# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_runTimer')).lstrip('.')
        return importlib.import_module(mname)
    _runTimer = swig_import_helper()
    del swig_import_helper
elif version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_runTimer', [dirname(__file__)])
        except ImportError:
            import _runTimer
            return _runTimer
        if fp is not None:
            try:
                _mod = imp.load_module('_runTimer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _runTimer = swig_import_helper()
    del swig_import_helper
else:
    import _runTimer
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _runTimer.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _runTimer.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _runTimer.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _runTimer.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _runTimer.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _runTimer.SwigPyIterator_equal(self, x)

    def copy(self):
        return _runTimer.SwigPyIterator_copy(self)

    def next(self):
        return _runTimer.SwigPyIterator_next(self)

    def __next__(self):
        return _runTimer.SwigPyIterator___next__(self)

    def previous(self):
        return _runTimer.SwigPyIterator_previous(self)

    def advance(self, n):
        return _runTimer.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _runTimer.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _runTimer.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _runTimer.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _runTimer.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _runTimer.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _runTimer.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _runTimer.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _runTimer.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _runTimer.IntVector___nonzero__(self)

    def __bool__(self):
        return _runTimer.IntVector___bool__(self)

    def __len__(self):
        return _runTimer.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _runTimer.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _runTimer.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _runTimer.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _runTimer.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _runTimer.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _runTimer.IntVector___setitem__(self, *args)

    def pop(self):
        return _runTimer.IntVector_pop(self)

    def append(self, x):
        return _runTimer.IntVector_append(self, x)

    def empty(self):
        return _runTimer.IntVector_empty(self)

    def size(self):
        return _runTimer.IntVector_size(self)

    def swap(self, v):
        return _runTimer.IntVector_swap(self, v)

    def begin(self):
        return _runTimer.IntVector_begin(self)

    def end(self):
        return _runTimer.IntVector_end(self)

    def rbegin(self):
        return _runTimer.IntVector_rbegin(self)

    def rend(self):
        return _runTimer.IntVector_rend(self)

    def clear(self):
        return _runTimer.IntVector_clear(self)

    def get_allocator(self):
        return _runTimer.IntVector_get_allocator(self)

    def pop_back(self):
        return _runTimer.IntVector_pop_back(self)

    def erase(self, *args):
        return _runTimer.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _runTimer.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _runTimer.IntVector_push_back(self, x)

    def front(self):
        return _runTimer.IntVector_front(self)

    def back(self):
        return _runTimer.IntVector_back(self)

    def assign(self, n, x):
        return _runTimer.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _runTimer.IntVector_resize(self, *args)

    def insert(self, *args):
        return _runTimer.IntVector_insert(self, *args)

    def reserve(self, n):
        return _runTimer.IntVector_reserve(self, n)

    def capacity(self):
        return _runTimer.IntVector_capacity(self)
    __swig_destroy__ = _runTimer.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _runTimer.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _runTimer.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _runTimer.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _runTimer.DoubleVector___bool__(self)

    def __len__(self):
        return _runTimer.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _runTimer.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _runTimer.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _runTimer.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _runTimer.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _runTimer.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _runTimer.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _runTimer.DoubleVector_pop(self)

    def append(self, x):
        return _runTimer.DoubleVector_append(self, x)

    def empty(self):
        return _runTimer.DoubleVector_empty(self)

    def size(self):
        return _runTimer.DoubleVector_size(self)

    def swap(self, v):
        return _runTimer.DoubleVector_swap(self, v)

    def begin(self):
        return _runTimer.DoubleVector_begin(self)

    def end(self):
        return _runTimer.DoubleVector_end(self)

    def rbegin(self):
        return _runTimer.DoubleVector_rbegin(self)

    def rend(self):
        return _runTimer.DoubleVector_rend(self)

    def clear(self):
        return _runTimer.DoubleVector_clear(self)

    def get_allocator(self):
        return _runTimer.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _runTimer.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _runTimer.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _runTimer.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _runTimer.DoubleVector_push_back(self, x)

    def front(self):
        return _runTimer.DoubleVector_front(self)

    def back(self):
        return _runTimer.DoubleVector_back(self)

    def assign(self, n, x):
        return _runTimer.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _runTimer.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _runTimer.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _runTimer.DoubleVector_reserve(self, n)

    def capacity(self):
        return _runTimer.DoubleVector_capacity(self)
    __swig_destroy__ = _runTimer.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _runTimer.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class LongDoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongDoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _runTimer.LongDoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _runTimer.LongDoubleVector___nonzero__(self)

    def __bool__(self):
        return _runTimer.LongDoubleVector___bool__(self)

    def __len__(self):
        return _runTimer.LongDoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _runTimer.LongDoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _runTimer.LongDoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _runTimer.LongDoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _runTimer.LongDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _runTimer.LongDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _runTimer.LongDoubleVector___setitem__(self, *args)

    def pop(self):
        return _runTimer.LongDoubleVector_pop(self)

    def append(self, x):
        return _runTimer.LongDoubleVector_append(self, x)

    def empty(self):
        return _runTimer.LongDoubleVector_empty(self)

    def size(self):
        return _runTimer.LongDoubleVector_size(self)

    def swap(self, v):
        return _runTimer.LongDoubleVector_swap(self, v)

    def begin(self):
        return _runTimer.LongDoubleVector_begin(self)

    def end(self):
        return _runTimer.LongDoubleVector_end(self)

    def rbegin(self):
        return _runTimer.LongDoubleVector_rbegin(self)

    def rend(self):
        return _runTimer.LongDoubleVector_rend(self)

    def clear(self):
        return _runTimer.LongDoubleVector_clear(self)

    def get_allocator(self):
        return _runTimer.LongDoubleVector_get_allocator(self)

    def pop_back(self):
        return _runTimer.LongDoubleVector_pop_back(self)

    def erase(self, *args):
        return _runTimer.LongDoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _runTimer.new_LongDoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _runTimer.LongDoubleVector_push_back(self, x)

    def front(self):
        return _runTimer.LongDoubleVector_front(self)

    def back(self):
        return _runTimer.LongDoubleVector_back(self)

    def assign(self, n, x):
        return _runTimer.LongDoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _runTimer.LongDoubleVector_resize(self, *args)

    def insert(self, *args):
        return _runTimer.LongDoubleVector_insert(self, *args)

    def reserve(self, n):
        return _runTimer.LongDoubleVector_reserve(self, n)

    def capacity(self):
        return _runTimer.LongDoubleVector_capacity(self)
    __swig_destroy__ = _runTimer.delete_LongDoubleVector
    __del__ = lambda self: None
LongDoubleVector_swigregister = _runTimer.LongDoubleVector_swigregister
LongDoubleVector_swigregister(LongDoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _runTimer.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _runTimer.FloatVector___nonzero__(self)

    def __bool__(self):
        return _runTimer.FloatVector___bool__(self)

    def __len__(self):
        return _runTimer.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _runTimer.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _runTimer.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _runTimer.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _runTimer.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _runTimer.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _runTimer.FloatVector___setitem__(self, *args)

    def pop(self):
        return _runTimer.FloatVector_pop(self)

    def append(self, x):
        return _runTimer.FloatVector_append(self, x)

    def empty(self):
        return _runTimer.FloatVector_empty(self)

    def size(self):
        return _runTimer.FloatVector_size(self)

    def swap(self, v):
        return _runTimer.FloatVector_swap(self, v)

    def begin(self):
        return _runTimer.FloatVector_begin(self)

    def end(self):
        return _runTimer.FloatVector_end(self)

    def rbegin(self):
        return _runTimer.FloatVector_rbegin(self)

    def rend(self):
        return _runTimer.FloatVector_rend(self)

    def clear(self):
        return _runTimer.FloatVector_clear(self)

    def get_allocator(self):
        return _runTimer.FloatVector_get_allocator(self)

    def pop_back(self):
        return _runTimer.FloatVector_pop_back(self)

    def erase(self, *args):
        return _runTimer.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _runTimer.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _runTimer.FloatVector_push_back(self, x)

    def front(self):
        return _runTimer.FloatVector_front(self)

    def back(self):
        return _runTimer.FloatVector_back(self)

    def assign(self, n, x):
        return _runTimer.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _runTimer.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _runTimer.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _runTimer.FloatVector_reserve(self, n)

    def capacity(self):
        return _runTimer.FloatVector_capacity(self)
    __swig_destroy__ = _runTimer.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _runTimer.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _runTimer.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _runTimer.StringVector___nonzero__(self)

    def __bool__(self):
        return _runTimer.StringVector___bool__(self)

    def __len__(self):
        return _runTimer.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _runTimer.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _runTimer.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _runTimer.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _runTimer.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _runTimer.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _runTimer.StringVector___setitem__(self, *args)

    def pop(self):
        return _runTimer.StringVector_pop(self)

    def append(self, x):
        return _runTimer.StringVector_append(self, x)

    def empty(self):
        return _runTimer.StringVector_empty(self)

    def size(self):
        return _runTimer.StringVector_size(self)

    def swap(self, v):
        return _runTimer.StringVector_swap(self, v)

    def begin(self):
        return _runTimer.StringVector_begin(self)

    def end(self):
        return _runTimer.StringVector_end(self)

    def rbegin(self):
        return _runTimer.StringVector_rbegin(self)

    def rend(self):
        return _runTimer.StringVector_rend(self)

    def clear(self):
        return _runTimer.StringVector_clear(self)

    def get_allocator(self):
        return _runTimer.StringVector_get_allocator(self)

    def pop_back(self):
        return _runTimer.StringVector_pop_back(self)

    def erase(self, *args):
        return _runTimer.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _runTimer.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _runTimer.StringVector_push_back(self, x)

    def front(self):
        return _runTimer.StringVector_front(self)

    def back(self):
        return _runTimer.StringVector_back(self)

    def assign(self, n, x):
        return _runTimer.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _runTimer.StringVector_resize(self, *args)

    def insert(self, *args):
        return _runTimer.StringVector_insert(self, *args)

    def reserve(self, n):
        return _runTimer.StringVector_reserve(self, n)

    def capacity(self):
        return _runTimer.StringVector_capacity(self)
    __swig_destroy__ = _runTimer.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _runTimer.StringVector_swigregister
StringVector_swigregister(StringVector)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _runTimer.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _runTimer.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _runTimer.ConstCharVector___bool__(self)

    def __len__(self):
        return _runTimer.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _runTimer.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _runTimer.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _runTimer.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _runTimer.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _runTimer.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _runTimer.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _runTimer.ConstCharVector_pop(self)

    def append(self, x):
        return _runTimer.ConstCharVector_append(self, x)

    def empty(self):
        return _runTimer.ConstCharVector_empty(self)

    def size(self):
        return _runTimer.ConstCharVector_size(self)

    def swap(self, v):
        return _runTimer.ConstCharVector_swap(self, v)

    def begin(self):
        return _runTimer.ConstCharVector_begin(self)

    def end(self):
        return _runTimer.ConstCharVector_end(self)

    def rbegin(self):
        return _runTimer.ConstCharVector_rbegin(self)

    def rend(self):
        return _runTimer.ConstCharVector_rend(self)

    def clear(self):
        return _runTimer.ConstCharVector_clear(self)

    def get_allocator(self):
        return _runTimer.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _runTimer.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _runTimer.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _runTimer.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _runTimer.ConstCharVector_push_back(self, x)

    def front(self):
        return _runTimer.ConstCharVector_front(self)

    def back(self):
        return _runTimer.ConstCharVector_back(self)

    def assign(self, n, x):
        return _runTimer.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _runTimer.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _runTimer.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _runTimer.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _runTimer.ConstCharVector_capacity(self)
    __swig_destroy__ = _runTimer.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _runTimer.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)


def convertStringParam(IN, OUT):
    return _runTimer.convertStringParam(IN, OUT)
convertStringParam = _runTimer.convertStringParam

def ReadConfig(cname):
    return _runTimer.ReadConfig(cname)
ReadConfig = _runTimer.ReadConfig

def chToNum(ch):
    return _runTimer.chToNum(ch)
chToNum = _runTimer.chToNum

def readNumber(buffer, iStart, N0, N1):
    return _runTimer.readNumber(buffer, iStart, N0, N1)
readNumber = _runTimer.readNumber

def pulseToFloat(pulse, tau):
    return _runTimer.pulseToFloat(pulse, tau)
pulseToFloat = _runTimer.pulseToFloat

def test(argc, argv):
    return _runTimer.test(argc, argv)
test = _runTimer.test
class SignalContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignalContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignalContainer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _runTimer.new_SignalContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _runTimer.delete_SignalContainer
    __del__ = lambda self: None

    def GetSignalMean(self, t0, t1):
        return _runTimer.SignalContainer_GetSignalMean(self, t0, t1)

    def GetSignalMedian(self, t0, t1):
        return _runTimer.SignalContainer_GetSignalMedian(self, t0, t1)

    def GetSignalVariance(self, t0, t1):
        return _runTimer.SignalContainer_GetSignalVariance(self, t0, t1)

    def GetTime(self, iBin):
        return _runTimer.SignalContainer_GetTime(self, iBin)

    def GetSignal(self, iBin):
        return _runTimer.SignalContainer_GetSignal(self, iBin)

    def SetSignal(self, iBin, value):
        return _runTimer.SignalContainer_SetSignal(self, iBin, value)

    def GetSignalError(self, iBin):
        return _runTimer.SignalContainer_GetSignalError(self, iBin)

    def SetSignalError(self, iBin, value):
        return _runTimer.SignalContainer_SetSignalError(self, iBin, value)

    def GetNbins(self):
        return _runTimer.SignalContainer_GetNbins(self)
SignalContainer_swigregister = _runTimer.SignalContainer_swigregister
SignalContainer_swigregister(SignalContainer)

class BaseRun(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseRun, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseRun, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _runTimer.new_BaseRun()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _runTimer.delete_BaseRun
    __del__ = lambda self: None

    def ReadRAWData(self, runID, rawdata_dir, output_dir):
        return _runTimer.BaseRun_ReadRAWData(self, runID, rawdata_dir, output_dir)

    def GetRunID(self):
        return _runTimer.BaseRun_GetRunID(self)

    def GetTelcode(self):
        return _runTimer.BaseRun_GetTelcode(self)

    def GetObscode(self):
        return _runTimer.BaseRun_GetObscode(self)

    def GetRtype(self):
        return _runTimer.BaseRun_GetRtype(self)

    def GetPsrname(self):
        return _runTimer.BaseRun_GetPsrname(self)

    def GetDatatype(self):
        return _runTimer.BaseRun_GetDatatype(self)

    def GetNpol(self):
        return _runTimer.BaseRun_GetNpol(self)

    def GetSumchan(self):
        return _runTimer.BaseRun_GetSumchan(self)

    def GetUtcDay(self):
        return _runTimer.BaseRun_GetUtcDay(self)

    def GetUtcMonth(self):
        return _runTimer.BaseRun_GetUtcMonth(self)

    def GetUtcYear(self):
        return _runTimer.BaseRun_GetUtcYear(self)

    def GetUtcHour(self):
        return _runTimer.BaseRun_GetUtcHour(self)

    def GetUtcMinute(self):
        return _runTimer.BaseRun_GetUtcMinute(self)

    def GetUtcSecond(self):
        return _runTimer.BaseRun_GetUtcSecond(self)

    def GetDay(self):
        return _runTimer.BaseRun_GetDay(self)

    def GetMonth(self):
        return _runTimer.BaseRun_GetMonth(self)

    def GetYear(self):
        return _runTimer.BaseRun_GetYear(self)

    def GetHour(self):
        return _runTimer.BaseRun_GetHour(self)

    def GetMinute(self):
        return _runTimer.BaseRun_GetMinute(self)

    def GetSecond(self):
        return _runTimer.BaseRun_GetSecond(self)

    def GetPeriod(self):
        return _runTimer.BaseRun_GetPeriod(self)

    def GetNumpuls(self):
        return _runTimer.BaseRun_GetNumpuls(self)

    def GetNumpointwin(self):
        return _runTimer.BaseRun_GetNumpointwin(self)

    def GetNChannels(self):
        return _runTimer.BaseRun_GetNChannels(self)

    def GetFreqFirst(self):
        return _runTimer.BaseRun_GetFreqFirst(self)

    def GetFreqLast(self):
        return _runTimer.BaseRun_GetFreqLast(self)

    def GetWLFirst(self):
        return _runTimer.BaseRun_GetWLFirst(self)

    def GetWLLast(self):
        return _runTimer.BaseRun_GetWLLast(self)

    def GetTau(self):
        return _runTimer.BaseRun_GetTau(self)

    def GetDM(self):
        return _runTimer.BaseRun_GetDM(self)

    def GetNPoints(self):
        return _runTimer.BaseRun_GetNPoints(self)

    def GetDuration(self):
        return _runTimer.BaseRun_GetDuration(self)

    def GetChannelSignal(self, iband):
        return _runTimer.BaseRun_GetChannelSignal(self, iband)

    def GetFreqResponse(self, iband):
        return _runTimer.BaseRun_GetFreqResponse(self, iband)
BaseRun_swigregister = _runTimer.BaseRun_swigregister
BaseRun_swigregister(BaseRun)

class PulseExtractor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PulseExtractor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PulseExtractor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _runTimer.new_PulseExtractor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _runTimer.delete_PulseExtractor
    __del__ = lambda self: None

    def SetBaseRun(self, br):
        return _runTimer.PulseExtractor_SetBaseRun(self, br)

    def SetDM(self, DM):
        return _runTimer.PulseExtractor_SetDM(self, DM)

    def DoCompensation(self):
        return _runTimer.PulseExtractor_DoCompensation(self)

    def SumPeriods(self):
        return _runTimer.PulseExtractor_SumPeriods(self)

    def SumPerChannelPeriods(self):
        return _runTimer.PulseExtractor_SumPerChannelPeriods(self)

    def GetDM(self):
        return _runTimer.PulseExtractor_GetDM(self)

    def PrintFrequencyResponse(self, outdir):
        return _runTimer.PulseExtractor_PrintFrequencyResponse(self, outdir)

    def PrintSumProfile(self, outdir):
        return _runTimer.PulseExtractor_PrintSumProfile(self, outdir)

    def PrintChannelSumProfile(self, outdir):
        return _runTimer.PulseExtractor_PrintChannelSumProfile(self, outdir)

    def PrintCompensatedImpulses(self, outdir):
        return _runTimer.PulseExtractor_PrintCompensatedImpulses(self, outdir)

    def GetSumProfile(self):
        return _runTimer.PulseExtractor_GetSumProfile(self)

    def GetSumPeriodsVec(self):
        return _runTimer.PulseExtractor_GetSumPeriodsVec(self)

    def GetChannelSumProfile(self, iChan):
        return _runTimer.PulseExtractor_GetChannelSumProfile(self, iChan)

    def GetCompensatedImpulse(self, i):
        return _runTimer.PulseExtractor_GetCompensatedImpulse(self, i)

    def GetCompensatedImpulseVec(self, i):
        return _runTimer.PulseExtractor_GetCompensatedImpulseVec(self, i)

    def FillMaskFRweights(self):
        return _runTimer.PulseExtractor_FillMaskFRweights(self)

    def ReadMask(self, fname):
        return _runTimer.PulseExtractor_ReadMask(self, fname)

    def SetChannelMask(self, mask):
        return _runTimer.PulseExtractor_SetChannelMask(self, mask)

    def GetChannelMask(self):
        return _runTimer.PulseExtractor_GetChannelMask(self)

    def RemoveSpikes(self, nVar):
        return _runTimer.PulseExtractor_RemoveSpikes(self, nVar)

    def CleanFrequencyResponse(self, nVar):
        return _runTimer.PulseExtractor_CleanFrequencyResponse(self, nVar)

    def NormaliseToUnity(self, fDo):
        return _runTimer.PulseExtractor_NormaliseToUnity(self, fDo)
PulseExtractor_swigregister = _runTimer.PulseExtractor_swigregister
PulseExtractor_swigregister(PulseExtractor)

class Cor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _runTimer.new_Cor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _runTimer.delete_Cor
    __del__ = lambda self: None

    def ccf(self, finPulse, rawdata_dir, output_dir, runs, tplfile, utcloc):
        return _runTimer.Cor_ccf(self, finPulse, rawdata_dir, output_dir, runs, tplfile, utcloc)

    def Tplread(self, rawdata_dir):
        return _runTimer.Cor_Tplread(self, rawdata_dir)

    def ScaleTpl(self, intpl, tau):
        return _runTimer.Cor_ScaleTpl(self, intpl, tau)

    def dccf(self, tpl, prf):
        return _runTimer.Cor_dccf(self, tpl, prf)

    def utc2mjd(self, finPulse, utcloc, dtkkf):
        return _runTimer.Cor_utc2mjd(self, finPulse, utcloc, dtkkf)

    def ApproxMax(self, arg2, arg3, arg4, arg5, arg6):
        return _runTimer.Cor_ApproxMax(self, arg2, arg3, arg4, arg5, arg6)

    def CalcErrorW50(self, finPulse, snr):
        return _runTimer.Cor_CalcErrorW50(self, finPulse, snr)

    def SNR(self, finPulse):
        return _runTimer.Cor_SNR(self, finPulse)

    def CofM(self, data, datalength, dt):
        return _runTimer.Cor_CofM(self, data, datalength, dt)

    def TOAWrite(self, output_dir, sitoa):
        return _runTimer.Cor_TOAWrite(self, output_dir, sitoa)

    def KKFWrite(self, output_dir, kkf):
        return _runTimer.Cor_KKFWrite(self, output_dir, kkf)

    def KKFdatWrite(self, output_dir, kkf, runs):
        return _runTimer.Cor_KKFdatWrite(self, output_dir, kkf, runs)

    def utc2mjds(self, finPulse, utcloc, dtkkf):
        return _runTimer.Cor_utc2mjds(self, finPulse, utcloc, dtkkf)
Cor_swigregister = _runTimer.Cor_swigregister
Cor_swigregister(Cor)

class SumProfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SumProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SumProfile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["telcode"] = _runTimer.SumProfile_telcode_set
    __swig_getmethods__["telcode"] = _runTimer.SumProfile_telcode_get
    if _newclass:
        telcode = _swig_property(_runTimer.SumProfile_telcode_get, _runTimer.SumProfile_telcode_set)
    __swig_setmethods__["obscode"] = _runTimer.SumProfile_obscode_set
    __swig_getmethods__["obscode"] = _runTimer.SumProfile_obscode_get
    if _newclass:
        obscode = _swig_property(_runTimer.SumProfile_obscode_get, _runTimer.SumProfile_obscode_set)
    __swig_setmethods__["rtype"] = _runTimer.SumProfile_rtype_set
    __swig_getmethods__["rtype"] = _runTimer.SumProfile_rtype_get
    if _newclass:
        rtype = _swig_property(_runTimer.SumProfile_rtype_get, _runTimer.SumProfile_rtype_set)
    __swig_setmethods__["psrname"] = _runTimer.SumProfile_psrname_set
    __swig_getmethods__["psrname"] = _runTimer.SumProfile_psrname_get
    if _newclass:
        psrname = _swig_property(_runTimer.SumProfile_psrname_get, _runTimer.SumProfile_psrname_set)
    __swig_setmethods__["datatype"] = _runTimer.SumProfile_datatype_set
    __swig_getmethods__["datatype"] = _runTimer.SumProfile_datatype_get
    if _newclass:
        datatype = _swig_property(_runTimer.SumProfile_datatype_get, _runTimer.SumProfile_datatype_set)
    __swig_setmethods__["npol"] = _runTimer.SumProfile_npol_set
    __swig_getmethods__["npol"] = _runTimer.SumProfile_npol_get
    if _newclass:
        npol = _swig_property(_runTimer.SumProfile_npol_get, _runTimer.SumProfile_npol_set)
    __swig_setmethods__["sumchan"] = _runTimer.SumProfile_sumchan_set
    __swig_getmethods__["sumchan"] = _runTimer.SumProfile_sumchan_get
    if _newclass:
        sumchan = _swig_property(_runTimer.SumProfile_sumchan_get, _runTimer.SumProfile_sumchan_set)
    __swig_setmethods__["nChan"] = _runTimer.SumProfile_nChan_set
    __swig_getmethods__["nChan"] = _runTimer.SumProfile_nChan_get
    if _newclass:
        nChan = _swig_property(_runTimer.SumProfile_nChan_get, _runTimer.SumProfile_nChan_set)
    __swig_setmethods__["nChanAfterMask"] = _runTimer.SumProfile_nChanAfterMask_set
    __swig_getmethods__["nChanAfterMask"] = _runTimer.SumProfile_nChanAfterMask_get
    if _newclass:
        nChanAfterMask = _swig_property(_runTimer.SumProfile_nChanAfterMask_get, _runTimer.SumProfile_nChanAfterMask_set)
    __swig_setmethods__["year"] = _runTimer.SumProfile_year_set
    __swig_getmethods__["year"] = _runTimer.SumProfile_year_get
    if _newclass:
        year = _swig_property(_runTimer.SumProfile_year_get, _runTimer.SumProfile_year_set)
    __swig_setmethods__["month"] = _runTimer.SumProfile_month_set
    __swig_getmethods__["month"] = _runTimer.SumProfile_month_get
    if _newclass:
        month = _swig_property(_runTimer.SumProfile_month_get, _runTimer.SumProfile_month_set)
    __swig_setmethods__["day"] = _runTimer.SumProfile_day_set
    __swig_getmethods__["day"] = _runTimer.SumProfile_day_get
    if _newclass:
        day = _swig_property(_runTimer.SumProfile_day_get, _runTimer.SumProfile_day_set)
    __swig_setmethods__["hour"] = _runTimer.SumProfile_hour_set
    __swig_getmethods__["hour"] = _runTimer.SumProfile_hour_get
    if _newclass:
        hour = _swig_property(_runTimer.SumProfile_hour_get, _runTimer.SumProfile_hour_set)
    __swig_setmethods__["min"] = _runTimer.SumProfile_min_set
    __swig_getmethods__["min"] = _runTimer.SumProfile_min_get
    if _newclass:
        min = _swig_property(_runTimer.SumProfile_min_get, _runTimer.SumProfile_min_set)
    __swig_setmethods__["sec"] = _runTimer.SumProfile_sec_set
    __swig_getmethods__["sec"] = _runTimer.SumProfile_sec_get
    if _newclass:
        sec = _swig_property(_runTimer.SumProfile_sec_get, _runTimer.SumProfile_sec_set)
    __swig_setmethods__["utcday"] = _runTimer.SumProfile_utcday_set
    __swig_getmethods__["utcday"] = _runTimer.SumProfile_utcday_get
    if _newclass:
        utcday = _swig_property(_runTimer.SumProfile_utcday_get, _runTimer.SumProfile_utcday_set)
    __swig_setmethods__["utcmonth"] = _runTimer.SumProfile_utcmonth_set
    __swig_getmethods__["utcmonth"] = _runTimer.SumProfile_utcmonth_get
    if _newclass:
        utcmonth = _swig_property(_runTimer.SumProfile_utcmonth_get, _runTimer.SumProfile_utcmonth_set)
    __swig_setmethods__["utcyear"] = _runTimer.SumProfile_utcyear_set
    __swig_getmethods__["utcyear"] = _runTimer.SumProfile_utcyear_get
    if _newclass:
        utcyear = _swig_property(_runTimer.SumProfile_utcyear_get, _runTimer.SumProfile_utcyear_set)
    __swig_setmethods__["utchour"] = _runTimer.SumProfile_utchour_set
    __swig_getmethods__["utchour"] = _runTimer.SumProfile_utchour_get
    if _newclass:
        utchour = _swig_property(_runTimer.SumProfile_utchour_get, _runTimer.SumProfile_utchour_set)
    __swig_setmethods__["utcmin"] = _runTimer.SumProfile_utcmin_set
    __swig_getmethods__["utcmin"] = _runTimer.SumProfile_utcmin_get
    if _newclass:
        utcmin = _swig_property(_runTimer.SumProfile_utcmin_get, _runTimer.SumProfile_utcmin_set)
    __swig_setmethods__["utcsec"] = _runTimer.SumProfile_utcsec_set
    __swig_getmethods__["utcsec"] = _runTimer.SumProfile_utcsec_get
    if _newclass:
        utcsec = _swig_property(_runTimer.SumProfile_utcsec_get, _runTimer.SumProfile_utcsec_set)
    __swig_setmethods__["period"] = _runTimer.SumProfile_period_set
    __swig_getmethods__["period"] = _runTimer.SumProfile_period_get
    if _newclass:
        period = _swig_property(_runTimer.SumProfile_period_get, _runTimer.SumProfile_period_set)
    __swig_setmethods__["numpuls"] = _runTimer.SumProfile_numpuls_set
    __swig_getmethods__["numpuls"] = _runTimer.SumProfile_numpuls_get
    if _newclass:
        numpuls = _swig_property(_runTimer.SumProfile_numpuls_get, _runTimer.SumProfile_numpuls_set)
    __swig_setmethods__["tau"] = _runTimer.SumProfile_tau_set
    __swig_getmethods__["tau"] = _runTimer.SumProfile_tau_get
    if _newclass:
        tau = _swig_property(_runTimer.SumProfile_tau_get, _runTimer.SumProfile_tau_set)
    __swig_setmethods__["numpointwin"] = _runTimer.SumProfile_numpointwin_set
    __swig_getmethods__["numpointwin"] = _runTimer.SumProfile_numpointwin_get
    if _newclass:
        numpointwin = _swig_property(_runTimer.SumProfile_numpointwin_get, _runTimer.SumProfile_numpointwin_set)
    __swig_setmethods__["freq"] = _runTimer.SumProfile_freq_set
    __swig_getmethods__["freq"] = _runTimer.SumProfile_freq_get
    if _newclass:
        freq = _swig_property(_runTimer.SumProfile_freq_get, _runTimer.SumProfile_freq_set)
    __swig_setmethods__["prfdata"] = _runTimer.SumProfile_prfdata_set
    __swig_getmethods__["prfdata"] = _runTimer.SumProfile_prfdata_get
    if _newclass:
        prfdata = _swig_property(_runTimer.SumProfile_prfdata_get, _runTimer.SumProfile_prfdata_set)

    def __init__(self):
        this = _runTimer.new_SumProfile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _runTimer.delete_SumProfile
    __del__ = lambda self: None
SumProfile_swigregister = _runTimer.SumProfile_swigregister
SumProfile_swigregister(SumProfile)

class ConfigParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rawdata_dir"] = _runTimer.ConfigParam_rawdata_dir_set
    __swig_getmethods__["rawdata_dir"] = _runTimer.ConfigParam_rawdata_dir_get
    if _newclass:
        rawdata_dir = _swig_property(_runTimer.ConfigParam_rawdata_dir_get, _runTimer.ConfigParam_rawdata_dir_set)
    __swig_setmethods__["output_dir"] = _runTimer.ConfigParam_output_dir_set
    __swig_getmethods__["output_dir"] = _runTimer.ConfigParam_output_dir_get
    if _newclass:
        output_dir = _swig_property(_runTimer.ConfigParam_output_dir_get, _runTimer.ConfigParam_output_dir_set)
    __swig_setmethods__["maskfile"] = _runTimer.ConfigParam_maskfile_set
    __swig_getmethods__["maskfile"] = _runTimer.ConfigParam_maskfile_get
    if _newclass:
        maskfile = _swig_property(_runTimer.ConfigParam_maskfile_get, _runTimer.ConfigParam_maskfile_set)
    __swig_setmethods__["tplfile"] = _runTimer.ConfigParam_tplfile_set
    __swig_getmethods__["tplfile"] = _runTimer.ConfigParam_tplfile_get
    if _newclass:
        tplfile = _swig_property(_runTimer.ConfigParam_tplfile_get, _runTimer.ConfigParam_tplfile_set)
    __swig_setmethods__["doRemoveSpikes"] = _runTimer.ConfigParam_doRemoveSpikes_set
    __swig_getmethods__["doRemoveSpikes"] = _runTimer.ConfigParam_doRemoveSpikes_get
    if _newclass:
        doRemoveSpikes = _swig_property(_runTimer.ConfigParam_doRemoveSpikes_get, _runTimer.ConfigParam_doRemoveSpikes_set)
    __swig_setmethods__["doFRfiltering"] = _runTimer.ConfigParam_doFRfiltering_set
    __swig_getmethods__["doFRfiltering"] = _runTimer.ConfigParam_doFRfiltering_get
    if _newclass:
        doFRfiltering = _swig_property(_runTimer.ConfigParam_doFRfiltering_get, _runTimer.ConfigParam_doFRfiltering_set)
    __swig_setmethods__["getDynSpectrum"] = _runTimer.ConfigParam_getDynSpectrum_set
    __swig_getmethods__["getDynSpectrum"] = _runTimer.ConfigParam_getDynSpectrum_get
    if _newclass:
        getDynSpectrum = _swig_property(_runTimer.ConfigParam_getDynSpectrum_get, _runTimer.ConfigParam_getDynSpectrum_set)
    __swig_setmethods__["getIndImpulses"] = _runTimer.ConfigParam_getIndImpulses_set
    __swig_getmethods__["getIndImpulses"] = _runTimer.ConfigParam_getIndImpulses_get
    if _newclass:
        getIndImpulses = _swig_property(_runTimer.ConfigParam_getIndImpulses_get, _runTimer.ConfigParam_getIndImpulses_set)
    __swig_setmethods__["getFR"] = _runTimer.ConfigParam_getFR_set
    __swig_getmethods__["getFR"] = _runTimer.ConfigParam_getFR_get
    if _newclass:
        getFR = _swig_property(_runTimer.ConfigParam_getFR_get, _runTimer.ConfigParam_getFR_set)
    __swig_setmethods__["useTrueNorm"] = _runTimer.ConfigParam_useTrueNorm_set
    __swig_getmethods__["useTrueNorm"] = _runTimer.ConfigParam_useTrueNorm_get
    if _newclass:
        useTrueNorm = _swig_property(_runTimer.ConfigParam_useTrueNorm_get, _runTimer.ConfigParam_useTrueNorm_set)
    __swig_setmethods__["utccorr"] = _runTimer.ConfigParam_utccorr_set
    __swig_getmethods__["utccorr"] = _runTimer.ConfigParam_utccorr_get
    if _newclass:
        utccorr = _swig_property(_runTimer.ConfigParam_utccorr_get, _runTimer.ConfigParam_utccorr_set)
    __swig_setmethods__["nVarFR"] = _runTimer.ConfigParam_nVarFR_set
    __swig_getmethods__["nVarFR"] = _runTimer.ConfigParam_nVarFR_get
    if _newclass:
        nVarFR = _swig_property(_runTimer.ConfigParam_nVarFR_get, _runTimer.ConfigParam_nVarFR_set)
    __swig_setmethods__["nVarSpike"] = _runTimer.ConfigParam_nVarSpike_set
    __swig_getmethods__["nVarSpike"] = _runTimer.ConfigParam_nVarSpike_get
    if _newclass:
        nVarSpike = _swig_property(_runTimer.ConfigParam_nVarSpike_get, _runTimer.ConfigParam_nVarSpike_set)
    __swig_setmethods__["runs"] = _runTimer.ConfigParam_runs_set
    __swig_getmethods__["runs"] = _runTimer.ConfigParam_runs_get
    if _newclass:
        runs = _swig_property(_runTimer.ConfigParam_runs_get, _runTimer.ConfigParam_runs_set)

    def __init__(self):
        this = _runTimer.new_ConfigParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _runTimer.delete_ConfigParam
    __del__ = lambda self: None
ConfigParam_swigregister = _runTimer.ConfigParam_swigregister
ConfigParam_swigregister(ConfigParam)

class Tpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tpl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["psrname"] = _runTimer.Tpl_psrname_set
    __swig_getmethods__["psrname"] = _runTimer.Tpl_psrname_get
    if _newclass:
        psrname = _swig_property(_runTimer.Tpl_psrname_get, _runTimer.Tpl_psrname_set)
    __swig_setmethods__["date"] = _runTimer.Tpl_date_set
    __swig_getmethods__["date"] = _runTimer.Tpl_date_get
    if _newclass:
        date = _swig_property(_runTimer.Tpl_date_get, _runTimer.Tpl_date_set)
    __swig_setmethods__["freq"] = _runTimer.Tpl_freq_set
    __swig_getmethods__["freq"] = _runTimer.Tpl_freq_get
    if _newclass:
        freq = _swig_property(_runTimer.Tpl_freq_get, _runTimer.Tpl_freq_set)
    __swig_setmethods__["tau"] = _runTimer.Tpl_tau_set
    __swig_getmethods__["tau"] = _runTimer.Tpl_tau_get
    if _newclass:
        tau = _swig_property(_runTimer.Tpl_tau_get, _runTimer.Tpl_tau_set)
    __swig_setmethods__["numpoint"] = _runTimer.Tpl_numpoint_set
    __swig_getmethods__["numpoint"] = _runTimer.Tpl_numpoint_get
    if _newclass:
        numpoint = _swig_property(_runTimer.Tpl_numpoint_get, _runTimer.Tpl_numpoint_set)
    __swig_setmethods__["tpldata"] = _runTimer.Tpl_tpldata_set
    __swig_getmethods__["tpldata"] = _runTimer.Tpl_tpldata_get
    if _newclass:
        tpldata = _swig_property(_runTimer.Tpl_tpldata_get, _runTimer.Tpl_tpldata_set)

    def __init__(self):
        this = _runTimer.new_Tpl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _runTimer.delete_Tpl
    __del__ = lambda self: None
Tpl_swigregister = _runTimer.Tpl_swigregister
Tpl_swigregister(Tpl)

class Skkf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Skkf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Skkf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kk"] = _runTimer.Skkf_kk_set
    __swig_getmethods__["kk"] = _runTimer.Skkf_kk_get
    if _newclass:
        kk = _swig_property(_runTimer.Skkf_kk_get, _runTimer.Skkf_kk_set)
    __swig_setmethods__["numpoint"] = _runTimer.Skkf_numpoint_set
    __swig_getmethods__["numpoint"] = _runTimer.Skkf_numpoint_get
    if _newclass:
        numpoint = _swig_property(_runTimer.Skkf_numpoint_get, _runTimer.Skkf_numpoint_set)
    __swig_setmethods__["maxp"] = _runTimer.Skkf_maxp_set
    __swig_getmethods__["maxp"] = _runTimer.Skkf_maxp_get
    if _newclass:
        maxp = _swig_property(_runTimer.Skkf_maxp_get, _runTimer.Skkf_maxp_set)
    __swig_setmethods__["errmax"] = _runTimer.Skkf_errmax_set
    __swig_getmethods__["errmax"] = _runTimer.Skkf_errmax_get
    if _newclass:
        errmax = _swig_property(_runTimer.Skkf_errmax_get, _runTimer.Skkf_errmax_set)
    __swig_setmethods__["snr"] = _runTimer.Skkf_snr_set
    __swig_getmethods__["snr"] = _runTimer.Skkf_snr_get
    if _newclass:
        snr = _swig_property(_runTimer.Skkf_snr_get, _runTimer.Skkf_snr_set)
    __swig_setmethods__["kkfdata"] = _runTimer.Skkf_kkfdata_set
    __swig_getmethods__["kkfdata"] = _runTimer.Skkf_kkfdata_get
    if _newclass:
        kkfdata = _swig_property(_runTimer.Skkf_kkfdata_get, _runTimer.Skkf_kkfdata_set)

    def __init__(self):
        this = _runTimer.new_Skkf()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _runTimer.delete_Skkf
    __del__ = lambda self: None
Skkf_swigregister = _runTimer.Skkf_swigregister
Skkf_swigregister(Skkf)

class Itoa(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Itoa, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Itoa, name)
    __repr__ = _swig_repr
    __swig_setmethods__["psrname"] = _runTimer.Itoa_psrname_set
    __swig_getmethods__["psrname"] = _runTimer.Itoa_psrname_get
    if _newclass:
        psrname = _swig_property(_runTimer.Itoa_psrname_get, _runTimer.Itoa_psrname_set)
    __swig_setmethods__["TOAMJD"] = _runTimer.Itoa_TOAMJD_set
    __swig_getmethods__["TOAMJD"] = _runTimer.Itoa_TOAMJD_get
    if _newclass:
        TOAMJD = _swig_property(_runTimer.Itoa_TOAMJD_get, _runTimer.Itoa_TOAMJD_set)
    __swig_setmethods__["iMJD"] = _runTimer.Itoa_iMJD_set
    __swig_getmethods__["iMJD"] = _runTimer.Itoa_iMJD_get
    if _newclass:
        iMJD = _swig_property(_runTimer.Itoa_iMJD_get, _runTimer.Itoa_iMJD_set)
    __swig_setmethods__["fMJD"] = _runTimer.Itoa_fMJD_set
    __swig_getmethods__["fMJD"] = _runTimer.Itoa_fMJD_get
    if _newclass:
        fMJD = _swig_property(_runTimer.Itoa_fMJD_get, _runTimer.Itoa_fMJD_set)
    __swig_setmethods__["sMJD"] = _runTimer.Itoa_sMJD_set
    __swig_getmethods__["sMJD"] = _runTimer.Itoa_sMJD_get
    if _newclass:
        sMJD = _swig_property(_runTimer.Itoa_sMJD_get, _runTimer.Itoa_sMJD_set)
    __swig_setmethods__["TOAerr"] = _runTimer.Itoa_TOAerr_set
    __swig_getmethods__["TOAerr"] = _runTimer.Itoa_TOAerr_get
    if _newclass:
        TOAerr = _swig_property(_runTimer.Itoa_TOAerr_get, _runTimer.Itoa_TOAerr_set)
    __swig_setmethods__["freq"] = _runTimer.Itoa_freq_set
    __swig_getmethods__["freq"] = _runTimer.Itoa_freq_get
    if _newclass:
        freq = _swig_property(_runTimer.Itoa_freq_get, _runTimer.Itoa_freq_set)
    __swig_setmethods__["ddm"] = _runTimer.Itoa_ddm_set
    __swig_getmethods__["ddm"] = _runTimer.Itoa_ddm_get
    if _newclass:
        ddm = _swig_property(_runTimer.Itoa_ddm_get, _runTimer.Itoa_ddm_set)
    __swig_setmethods__["obscode"] = _runTimer.Itoa_obscode_set
    __swig_getmethods__["obscode"] = _runTimer.Itoa_obscode_get
    if _newclass:
        obscode = _swig_property(_runTimer.Itoa_obscode_get, _runTimer.Itoa_obscode_set)

    def __init__(self):
        this = _runTimer.new_Itoa()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _runTimer.delete_Itoa
    __del__ = lambda self: None
Itoa_swigregister = _runTimer.Itoa_swigregister
Itoa_swigregister(Itoa)

# This file is compatible with both classic and new-style classes.

cvar = _runTimer.cvar

